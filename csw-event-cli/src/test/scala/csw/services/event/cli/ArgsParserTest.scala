package csw.services.event.cli

import java.io.ByteArrayOutputStream

import csw.messages.events.EventKey
import org.scalatest.{FunSuite, Matchers}

class ArgsParserTest extends FunSuite with Matchers {

  //Capture output/error generated by the parser, for cleaner test output. If interested, errCapture.toString will return capture errors.
  private val outCapture = new ByteArrayOutputStream
  private val errCapture = new ByteArrayOutputStream
  private val parser     = new ArgsParser("csw-event-cli")
  private val eventKeys  = Seq(EventKey("a.b.c"), EventKey("x.y.z"))

  def silentParse(args: Array[String]): Option[Options] =
    Console.withOut(outCapture) {
      Console.withErr(errCapture) {
        parser.parse(args)
      }
    }

  test("parse without arguments") {
    val args = Array("")
    silentParse(args) shouldBe None
  }

  test("parse inspect command without any options") {
    val args = Array("inspect")
    silentParse(args) shouldBe None
  }

  test("parse get command without any options") {
    val args = Array("get")
    silentParse(args) shouldBe None
  }

  test("parse inspect command with only mandatory options") {
    val args = Array("inspect", "-e", "a.b.c,x.y.z")
    silentParse(args) shouldBe Some(Options("inspect", eventKeys))
  }

  test("parse get with only mandatory options") {
    val args = Array("get", "-e", "a.b.c,x.y.z")
    silentParse(args) shouldBe Some(Options("get", eventsMap = Map(EventKey("a.b.c") → Set(), EventKey("x.y.z") → Set())))
  }

  test("parse get with json output") {
    val args = Array("get", "-e", "a.b.c,x.y.z:k2:k3", "-o", "json")
    silentParse(args) shouldBe Some(
      Options("get", eventsMap = Map(EventKey("a.b.c") → Set(), EventKey("x.y.z") → Set("k2", "k3")), out = "json")
    )
  }

  test("parse get with all options") {
    val args = Array("get", "-e", "a.b.c,x.y.z:k2:k3", "-o", "oneline", "-t", "-i", "-u")
    silentParse(args) shouldBe Some(
      Options(
        "get",
        eventsMap = Map(EventKey("a.b.c") → Set(), EventKey("x.y.z") → Set("k2", "k3")),
        printTimestamp = true,
        printId = true,
        printUnits = true
      )
    )
  }

}
