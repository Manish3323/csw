package csw.services.alarm.cli.args
import java.io.ByteArrayOutputStream
import java.nio.file.Paths

import csw.services.BuildInfo
import csw.services.alarm.api.models.AlarmSeverity.Major
import org.scalatest.{FunSuite, Matchers}

class ArgsParserTest extends FunSuite with Matchers {

  //Capture output/error generated by the parser, for cleaner test output. If interested, errCapture.toString will return capture errors.
  private val outCapture = new ByteArrayOutputStream
  private val errCapture = new ByteArrayOutputStream
  private val parser     = new ArgsParser(BuildInfo.name)

  def silentParse(args: Array[String]): Option[CommandLineArgs] = Console.withOut(outCapture) {
    Console.withErr(errCapture) {
      parser.parse(args)
    }
  }

  test("parse without specifying operation") {
    val args = Array("")
    silentParse(args) shouldBe None
  }

  test("parse init command without any options") {
    val args = Array("init")
    silentParse(args) shouldBe None
  }

  test("parse init command with only mandatory options") {
    val args = Array("init", "/a/b/c")
    silentParse(args) should contain(
      CommandLineArgs(
        cmd = "init",
        filePath = Some(Paths.get("/a/b/c"))
      )
    )
  }

  test("parse init command with all options") {
    val args = Array("init", "/a/b/c", "--local", "--reset")
    silentParse(args) should contain(
      CommandLineArgs(
        cmd = "init",
        filePath = Some(Paths.get("/a/b/c")),
        isLocal = true,
        reset = true
      )
    )
  }

  test("parse update command without any options") {
    val args = Array("update")
    silentParse(args) shouldBe None
  }

  test("parse update command with all options") {
    val args = Array(
      "update",
      "--subsystem",
      "NFIRAOS",
      "--component",
      "trombone",
      "--name",
      "tromboneAxisHighLimitAlarm",
      "--severity",
      "Major"
    )

    silentParse(args) should contain(
      CommandLineArgs(
        cmd = "update",
        subsystem = "NFIRAOS",
        component = "trombone",
        name = "tromboneAxisHighLimitAlarm",
        severity = Major
      )
    )
  }

  test("parse acknowledge command") {
    val args = Array(
      "acknowledge",
      "--subsystem",
      "NFIRAOS",
      "--component",
      "trombone",
      "--name",
      "tromboneAxisHighLimitAlarm"
    )

    silentParse(args) should contain(
      CommandLineArgs(
        cmd = "acknowledge",
        subsystem = "NFIRAOS",
        component = "trombone",
        name = "tromboneAxisHighLimitAlarm"
      )
    )
  }

  test("parse acknowledge command without any options") {
    val args = Array("acknowledge")
    silentParse(args) shouldBe None
  }
}
