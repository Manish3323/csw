package csw.services.alarm.cli.args
import java.io.ByteArrayOutputStream
import java.nio.file.Paths

import csw.services.BuildInfo
import csw.services.alarm.api.models.AlarmSeverity.Major
import csw.services.alarm.api.models.Key.AlarmKey
import org.scalatest.{FunSuite, Matchers}

class ArgsParserTest extends FunSuite with Matchers {

  //Capture output/error generated by the parser, for cleaner test output. If interested, errCapture.toString will return capture errors.
  private val outCapture = new ByteArrayOutputStream
  private val errCapture = new ByteArrayOutputStream
  private val parser     = new ArgsParser(BuildInfo.name)

  def silentParse(options: Array[String]): Option[Options] = Console.withOut(outCapture) {
    Console.withErr(errCapture) {
      parser.parse(options)
    }
  }

  test("parse without specifying operation") {
    val options = Array("")
    silentParse(options) shouldBe None
  }

  test("parse init command without any options") {
    val options = Array("init")
    silentParse(options) shouldBe None
  }

  test("parse init command with only mandatory options") {
    val options = Array("init", "/a/b/c")
    silentParse(options) should contain(
      Options(cmd = "init", filePath = Some(Paths.get("/a/b/c")))
    )
  }

  test("parse init command with all options") {
    val options = Array("init", "/a/b/c", "--local", "--reset")
    silentParse(options) should contain(
      Options(
        cmd = "init",
        filePath = Some(Paths.get("/a/b/c")),
        isLocal = true,
        reset = true
      )
    )
  }

  test("parse update command without any options") {
    val options = Array("update")
    silentParse(options) shouldBe None
  }

  test("parse update command with all options") {
    val options = Array(
      "update",
      "--alarmKey",
      "nfiraos.trombone.tromboneaxishighlimitalarm",
      "--severity",
      "Major"
    )

    silentParse(options) should contain(
      Options(cmd = "update", alarmKey = Some(AlarmKey("nfiraos.trombone.tromboneaxishighlimitalarm")), severity = Major)
    )
  }

  test("parse acknowledge command") {
    val options = Array(
      "acknowledge",
      "--alarmKey",
      "nfiraos.trombone.tromboneaxishighlimitalarm"
    )

    silentParse(options) should contain(
      Options(cmd = "acknowledge", alarmKey = Some(AlarmKey("nfiraos.trombone.tromboneaxishighlimitalarm")))
    )
  }

  test("parse acknowledge command without any options") {
    val options = Array("acknowledge")
    silentParse(options) shouldBe None
  }

  test("parse activate command") {
    val options = Array(
      "activate",
      "--alarmKey",
      "nfiraos.trombone.tromboneaxishighlimitalarm"
    )

    silentParse(options) should contain(
      Options(cmd = "activate", alarmKey = Some(AlarmKey("nfiraos.trombone.tromboneaxishighlimitalarm")))
    )
  }

  test("parse activate command without any options") {
    val options = Array("activate")
    silentParse(options) shouldBe None
  }

  test("parse deactivate command") {
    val options = Array(
      "deactivate",
      "--alarmKey",
      "nfiraos.trombone.tromboneaxishighlimitalarm"
    )

    silentParse(options) should contain(
      Options(cmd = "deactivate", alarmKey = Some(AlarmKey("nfiraos.trombone.tromboneaxishighlimitalarm")))
    )
  }

  test("parse deactivate command without any options") {
    val options = Array("deactivate")
    silentParse(options) shouldBe None
  }
}
